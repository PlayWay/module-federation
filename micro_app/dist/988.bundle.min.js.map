{"version":3,"sources":["webpack://importer/./src/ErrorBoundary.jsx","webpack://importer/./src/pages/Main.jsx","webpack://importer/./src/bootstrap.jsx"],"names":["ErrorBoundary","React","constructor","props","super","this","state","hasError","error","render","children","CircleLoading","Main","fallback","propTypes","ReactDom","document","getElementById"],"mappings":"iJAEA,MAAMA,UAAsBC,cACxBC,YAAYC,GACRC,MAAMD,GACNE,KAAKC,MAAQ,CAAEC,UAAU,GAGE,gCAACC,GAC5B,MAAO,CAAED,UAAU,GAGvBE,SACI,OAAIJ,KAAKC,MAAMC,SACJ,kEAGJF,KAAKF,MAAMO,UAI1B,UClBMC,EAAgBV,UAAW,IAAM,oCACjCW,EAAO,MACH,oCACN,kBAAC,aAAD,CAAgBC,SAAS,cACvB,kBAACF,EAAD,QAKNC,EAAKE,UAAY,GAIjB,UCVAC,WAAgB,kBAAC,EAAD,KAAe,kBAAC,EAAD,OAA0BC,SAASC,eAAe","file":"988.bundle.min.js","sourcesContent":["import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: true };\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h4>Не удалось загрузить микрофронтенд</h4>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {useEffect} from 'react';\r\n\r\n// @ts-ignore\r\nconst CircleLoading = React.lazy(() => import(\"omsReact/CircleLoading\"))\r\nconst Main = ({}) => {\r\n  return (<>\r\n    <React.Suspense fallback=\"Loading...\">\r\n      <CircleLoading/>\r\n    </React.Suspense>\r\n  </>);\r\n};\r\n\r\nMain.propTypes = {\r\n\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport ErrorBoundary from \"./ErrorBoundary\";\r\nimport \"antd/dist/antd.css\"\r\nimport Main from \"./pages/Main\";\r\n\r\nReactDom.render(<ErrorBoundary><Main /></ErrorBoundary>, document.getElementById(\"root\"));"],"sourceRoot":""}